"""
Objects to perform specific audio signal processing effects such
as distortions, delays, chorus and reverbs.
"""
- the "use" parameter of each dictionary defines if an effect should be applied (1) or not (0)
- all other parameters of the dictionaries are used to finetune the effects. Use them to acomplish your task.

Parameters for "disto": {"use": 0, "drive": 0.75, "slope": 0.5, "mul": 1, "add": 0} are described in class Disto:
class Disto(PyoObject):
    """
    Kind of Arc tangent distortion.

    Apply a kind of arc tangent distortion with controllable drive, followed
    by a one pole lowpass filter, to the input signal.

    As of version 0.8.0, this object use a simple but very efficient (4x
    faster than tanh or atan2 functions) waveshaper formula.

    The waveshaper algorithm is:

        y[n] = (1 + k) * x[n] / (1 + k * abs(x[n]))

    where:

        k = (2 * drive) / (1 - drive)

    :Parent: :py:class:`PyoObject`

    :Args:

        input: PyoObject
            Input signal to process.
        drive: float or PyoObject, optional
            Amount of distortion applied to the signal, between 0 and 1.
            Defaults to 0.75.
        slope: float or PyoObject, optional
            Slope of the lowpass filter applied after distortion,
            between 0 and 1. Defaults to 0.5.

    .. seealso::

        :py:class:`Degrade`, :py:class:`Clip`
    """

Parameters for "delay": {
                "use": 1,
                "delay": 0.25,
                "feedback": 0,
                "maxdelay": 1,
                "mul": 1,
                "add": 0,
            } are described in class Delay:
class Delay(PyoObject):
    """
    Sweepable recursive delay.

    :Parent: :py:class:`PyoObject`

    :Args:

        input: PyoObject
            Input signal to delayed.
        delay: float or PyoObject, optional
            Delay time in seconds. Defaults to 0.25.
        feedback: float or PyoObject, optional
            Amount of output signal sent back into the delay line.
            Defaults to 0.
        maxdelay: float, optional
            Maximum delay length in seconds. Available only at initialization.
            Defaults to 1.

    .. note::

        The minimum delay time allowed with Delay is one sample. It can be computed
        with :

        onesamp = 1.0 / s.getSamplingRate()

    .. seealso::

        :py:class:`SDelay`, :py:class:`SmoothDelay`, :py:class:`Waveguide`
    """

Parameters for "sdelay": {"use": 1, "delay": 0.25, "maxdelay": 1, "mul": 1, "add": 0}, are described in class SDelay:
class SDelay(PyoObject):
    """
    Simple delay without interpolation.

    :Parent: :py:class:`PyoObject`

    :Args:

        input: PyoObject
            Input signal to delayed.
        delay: float or PyoObject, optional
            Delay time in seconds. Defaults to 0.25.
        maxdelay: float, optional
            Maximum delay length in seconds. Available only at initialization.
            Defaults to 1.

    .. seealso::

        :py:class:`Delay`, :py:class:`Delay1`

    """

Parameters for "waveguide": {
                "use": 0,
                "freq": 100,
                "dur": 10,
                "minfreq": 20,
                "mul": 1,
                "add": 0,
            } are described in class Waveguide:
class Waveguide(PyoObject):
    """
    Basic waveguide model.

    This waveguide model consisting of one delay-line with a simple
    lowpass filtering and lagrange interpolation.

    :Parent: :py:class:`PyoObject`

    :Args:

        input: PyoObject
            Input signal to process.
        freq: float or PyoObject, optional
            Frequency, in cycle per second, of the waveguide (i.e. the inverse
            of delay time). Defaults to 100.
        dur: float or PyoObject, optional
            Duration, in seconds, for the waveguide to drop 40 dB below it's
            maxima. Defaults to 10.
        minfreq: float, optional
            Minimum possible frequency, used to initialized delay length.
            Available only at initialization. Defaults to 20.

    .. seealso::

        :py:class:`Delay`, :py:class:`AllpassWG`, :py:class:`WGVerb`

    """

Parameters for "allpass": {
                "use": 0,
                "freq": 100,
                "feed": 0.95,
                "detune": 0.5,
                "minfreq": 20,
                "mul": 1,
                "add": 0,
            } are described in class AllpassWG:
class AllpassWG(PyoObject):
    """
    Out of tune waveguide model with a recursive allpass network.

    This waveguide model consisting of one delay-line with a 3-stages recursive
    allpass filter which made the resonances of the waveguide out of tune.

    :Parent: :py:class:`PyoObject`

    :Args:

        input: PyoObject
            Input signal to process.
        freq: float or PyoObject, optional
            Frequency, in cycle per second, of the waveguide (i.e. the inverse
            of delay time). Defaults to 100.
        feed: float or PyoObject, optional
            Amount of output signal (between 0 and 1) sent back into the delay line.
            Defaults to 0.95.
        detune: float or PyoObject, optional
            Control the depth of the allpass delay-line filter, i.e. the depth of
            the detuning. Should be in the range 0 to 1. Defaults to 0.5.
        minfreq: float, optional
            Minimum possible frequency, used to initialized delay length.
            Available only at initialization. Defaults to 20.

    .. seealso::

        :py:class:`Delay`, :py:class:`Waveguide`

    """

Parameters for "freeverb": {
                "use": 1,
                "size": 0.5,
                "damp": 0.5,
                "bal": 0.5,
                "mul": 1,
                "add": 0,
            } are described in class Freeverb:
class Freeverb(PyoObject):
    """
    Implementation of Jezar's Freeverb.

    Freeverb is a reverb unit generator based on Jezar's public domain
    C++ sources, composed of eight parallel comb filters, followed by four
    allpass units in series. Filters on each stream are slightly detuned
    in order to create multi-channel effects.

    :Parent: :py:class:`PyoObject`

    :Args:

        input: PyoObject
            Input signal to process.
        size: float or PyoObject, optional
            Controls the length of the reverb,  between 0 and 1. A higher
            value means longer reverb. Defaults to 0.5.
        damp: float or PyoObject, optional
            High frequency attenuation, between 0 and 1. A higher value
            will result in a faster decay of the high frequency range.
            Defaults to 0.5.
        bal: float or PyoObject, optional
            Balance between wet and dry signal, between 0 and 1. 0 means no
            reverb. Defaults to 0.5.

    .. seealso::

        :py:class:`WGVerb`, :py:class:`STRev`, :py:class:`CvlVerb`
    """

Parameters "monoreverb": {
                "use": 0,
                "feedback": 0.5,
                "cutoff": 5000,
                "bal": 0.5,
                "mul": 1,
                "add": 0,
            } are described in class WGVerb:
class WGVerb(PyoObject):
    """
    8 delay lines mono FDN reverb.

    8 delay lines FDN reverb, with feedback matrix based upon physical
    modeling scattering junction of 8 lossless waveguides of equal
    characteristic impedance.

    :Parent: :py:class:`PyoObject`

    :Args:

        input: PyoObject
            Input signal to process.
        feedback: float or PyoObject, optional
            Amount of output signal sent back into the delay lines.
            Defaults to 0.5.

            0.6 gives a good small "live" room sound, 0.8 a small hall,
            and 0.9 a large hall.
        cutoff: float or PyoObject, optional
            cutoff frequency of simple first order lowpass filters in the
            feedback loop of delay lines, in Hz. Defaults to 5000.
        bal: float or PyoObject, optional
            Balance between wet and dry signal, between 0 and 1. 0 means no
            reverb. Defaults to 0.5.

    .. seealso::

        :py:class:`Freeverb`, :py:class:`STRev`, :py:class:`CvlVerb`

    """

Parameters for "chorus": {
                "use": 1,
                "depth": 1,
                "feedback": 0.25,
                "bal": 0.5,
                "mul": 1,
                "add": 0,
            } are described in class Chorus:
class Chorus(PyoObject):
    """
    8 modulated delay lines chorus processor.

    A chorus effect occurs when individual sounds with roughly the same timbre and
    nearly (but never exactly) the same pitch converge and are perceived as one.

    :Parent: :py:class:`PyoObject`

    :Args:

        input: PyoObject
            Input signal to process.
        depth: float or PyoObject, optional
            Chorus depth, between 0 and 5. Defaults to 1.
        feedback: float or PyoObject, optional
            Amount of output signal sent back into the delay lines.
            Defaults to 0.25.
        bal: float or PyoObject, optional
            Balance between wet and dry signals, between 0 and 1. 0 means no
            chorus. Defaults to 0.5.
    """

Parameters for "harmonizer": {
                "use": 0,
                "transpo": -7.0,
                "feedback": 0,
                "winsize": 0.1,
                "mul": 1,
                "add": 0,
            } are described in class Harmonizer:
class Harmonizer(PyoObject):
    """
    Generates harmonizing voices in synchrony with its audio input.

    :Parent: :py:class:`PyoObject`

    :Args:

        input: PyoObject
            Input signal to process.
        transpo: float or PyoObject, optional
           Transposition factor in semitone. Defaults to -7.0.
        feedback: float or PyoObject, optional
            Amount of output signal sent back into the delay line.
            Defaults to 0.
        winsize: float, optional
            Window size in seconds (max = 1.0).
            Defaults to 0.1.
    """

Parameters "simpledelay": {"use": 0, "mul": 1, "add": 0} are described in class Delay1:
class Delay1(PyoObject):
    """
    Delays a signal by one sample.

    :Parent: :py:class:`PyoObject`

    :Args:

        input: PyoObject
            Input signal to process.
    """

Parameters for "stereoreverb": {
                "use": 1,
                "inpos": 0.5,
                "revtime": 1,
                "cutoff": 5000,
                "bal": 0.5,
                "roomSize": 1,
                "firstRefGain": -3,
                "mul": 1,
                "add": 0,
            } are described in class STRev:
class STRev(PyoObject):
    """
    Stereo reverb.

    Stereo reverb based on WGVerb (8 delay line FDN reverb). A mono
    input will produce two audio streams, left and right channels.
    Therefore, a stereo input will produce four audio streams, left
    and right channels for each input channel. Position of input
    streams can be set with the `inpos` argument. To achieve a stereo
    reverb, delay line lengths are slightly differents on both channels,
    but also, pre-delays length and filter cutoff of both channels will
    be affected to reflect the input position.

    :Parent: :py:class:`PyoObject`

    :Args:

        input: PyoObject
            Input signal to process.
        inpos: float or PyoObject, optional
            Position of the source, between 0 and 1. 0 means fully left
            and 1 means fully right. Defaults to 0.5.
        revtime: float or PyoObject, optional
            Duration, in seconds, of the reverberated sound, defined as
            the time needed to the sound to drop 40 dB below its peak.
            Defaults to 1.
        cutoff: float or PyoObject, optional
            cutoff frequency, in Hz, of a first order lowpass filters in the
            feedback loop of delay lines. Defaults to 5000.
        bal: float or PyoObject, optional
            Balance between wet and dry signal, between 0 and 1. 0 means no
            reverb. Defaults to 0.5.
        roomSize: float, optional
            Delay line length scaler, between 0.25 and 4. Values higher than
            1 make the delay lines longer and simulate larger rooms. Defaults to 1.
        firstRefGain: float, optional
            Gain, in dB, of the first reflexions of the room. Defaults to -3.
    """

Parameters for "smoothdelay": {
                "use": 1,
                "delay": 0.25,
                "feedback": 0,
                "crossfade": 0.05,
                "maxdelay": 1,
                "mul": 1,
                "add": 0,
            } are described in class SmoothDelay:
class SmoothDelay(PyoObject):
    """
    Artifact free sweepable recursive delay.

    SmoothDelay implements a delay line that does not produce
    clicks or pitch shifting when the delay time is changing.

    :Parent: :py:class:`PyoObject`

    :Args:

        input: PyoObject
            Input signal to delayed.
        delay: float or PyoObject, optional
            Delay time in seconds. Defaults to 0.25.
        feedback: float or PyoObject, optional
            Amount of output signal sent back into the delay line.
            Defaults to 0.
        crossfade: float, optional
            Crossfade time, in seconds, between overlaped readers.
            Defaults to 0.05.
        maxdelay: float, optional
            Maximum delay length in seconds. Available only at initialization.
            Defaults to 1.

    .. note::

        The minimum delay time allowed with SmoothDelay is one sample.
        It can be computed with :

        onesamp = 1.0 / s.getSamplingRate()

    .. seealso::

        :py:class:`Delay`, :py:class:`Waveguide`
    """

Parameters for "freqshift": {"use": 0, "shift": 100, "mul": 1, "add": 0} are described in class FreqShift:
class FreqShift(PyoObject):
    """
    Frequency shifting using single sideband amplitude modulation.

    Shifting frequencies means that the input signal can be detuned,
    where the harmonic components of the signal are shifted out of
    harmonic alignment with each other, e.g. a signal with harmonics at
    100, 200, 300, 400 and 500 Hz, shifted up by 50 Hz, will have harmonics
    at 150, 250, 350, 450, and 550 Hz.

    :Parent: :py:class:`PyoObject`

    :Args:

        input: PyoObject
            Input signal to process.
        shift: float or PyoObject, optional
            Amount of shifting in Hertz. Defaults to 100.
    """